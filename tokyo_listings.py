# -*- coding: utf-8 -*-
"""Tokyo_listings

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KYFGZrKHrMhIp_ak3ZcErXUL2NOxWITN
"""

import pandas as pd
import numpy as np

tokyo_listings_df =pd.read_csv('listings.csv', na_values='')
tokyo_listings_df

tokyo_listings_df.columns

tokyo_listings_df.shape

tokyo_listings_df.info()

"""#Data Cleaning

"""

#neighbourhood_group has no values; it can be removed

tokyo_listings_df.drop('neighbourhood_group', axis=1,inplace=True)

tokyo_listings_df #There is no neighbourhood_group

tokyo_listings_df.info()

#There are some attributes which contains null values; replace with 0 or mean

tokyo_listings_df.describe()

tokyo_listings_df.fillna({'last_review':0,'license':0,'host_name':0,'reviews_per_month':0}, inplace=False)


tokyo_listings_df.isnull().sum()

#For data exploration, we can drop the unuseful columns 
#correlation between price, min nights, room_type,neighbourhood,number_of_reviews, reviwews per month, availability 365 ; the other columns can be removed except id,host_id,lat and long

filtered_tokyo_listings_df=tokyo_listings_df[['name','id','host_id','neighbourhood','latitude','longitude','room_type','price','minimum_nights','availability_365']]

"""#Data Exploration"""

filtered_tokyo_listings_df['room_type'].unique()

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

room_type_pop =filtered_tokyo_listings_df['room_type'].value_counts()     #popularity of types of room
filtered_tokyo_listings_df['room_type'].value_counts().index

plt.figure(figsize=(12,12))
plt.pie(room_type_pop, labels=room_type_pop,autopct = '%1.1f%%', startangle=90)       #autopic show percentage; 1 one decimal
plt.legend(filtered_tokyo_listings_df['room_type'].value_counts().index,title='Room Category')
plt.title('Room Popularity')

neighbour_pop =filtered_tokyo_listings_df['neighbourhood'].value_counts()[filtered_tokyo_listings_df['neighbourhood'].value_counts()>200]
#filter neighbourhoods with at least 100 activities

neighbour_pop.count()
neighbour_pop.index

plt.figure(figsize=(20,12))
plt.pie(neighbour_pop, labels=neighbour_pop, autopct = '%1.1f%%', startangle=100)       #autopic show percentage; 1 one decimal
plt.legend(neighbour_pop.index)
plt.title('Neighbourhood Popularity')

list1=filtered_tokyo_listings_df['neighbourhood'].value_counts()

df2=filtered_tokyo_listings_df.loc[filtered_tokyo_listings_df['neighbourhood'].isin(['Chuo Ku', 'Arakawa Ku', 'Edogawa Ku', 'Katsushika Ku',
       'Minato Ku', 'Toshima Ku', 'Sumida Ku', 'Shibuya Ku',
       'Shinjuku Ku', 'Nakano Ku', 'Taito Ku', 'Setagaya Ku', 'Kita Ku',
       'Ota Ku'])]

list2=df2['price'].groupby(df2['neighbourhood']).mean()

pop_neigh= pd.concat([list1,list2],axis=1).head(14)
pop_neigh=pop_neigh.reset_index()
pop_neigh= pop_neigh.rename(columns={'neighbourhood':'count','index':'neighbourhood'})
pop_neigh=pop_neigh.sort_values(by='price', ascending=False)

plt.figure(figsize=(20,12))
fig3=sns.barplot(data=pop_neigh, x='neighbourhood',y='price',palette='Pastel1_d')
fig3.set_title('Average Price per Neighbourhood')
fig3.set_ylabel('Average Price')
fig3.set_xlabel('Neighbourhood')

#the plot the distribution of the average plot per neighbourhood

pop_neigh['neighbourhood'].unique()

df2=filtered_tokyo_listings_df.loc[filtered_tokyo_listings_df['neighbourhood'].isin(['Chuo Ku', 'Arakawa Ku', 'Edogawa Ku', 'Katsushika Ku',
       'Minato Ku', 'Toshima Ku', 'Sumida Ku', 'Shibuya Ku',
       'Shinjuku Ku', 'Nakano Ku', 'Taito Ku', 'Setagaya Ku', 'Kita Ku',
       'Ota Ku'])]

g= sns.catplot(x='room_type', col='neighbourhood',col_wrap=4, data=df2, kind='count', height=5)
g.set_axis_labels("",'Room Count')
g.despine(left=True)
g.set_xticklabels(rotation=90)
plt.figure(figsize=(20,10))

#the plot show the popularity of each type of room for the main considered neighbourhood

plt.figure(figsize=(10,6))
u=sns.scatterplot(df2.longitude,df2.latitude,hue=df2.neighbourhood)
u.legend(loc='right', bbox_to_anchor=(1.25, 0.5), ncol=1)

plt.figure(figsize=(10,6))
ax=plt.scatter(df2.longitude, df2.latitude, c=df2.price, cmap='summer', edgecolor='black', linewidth=1, alpha=0.75)

ax.ticklabel_format(style='plain')

import plotly.express as px

df2

import folium
from folium import plugins

df2

df2

m = folium.Map([40 ,-73], zoom_start=3,width="%100",height="%100")
locations = list(zip(df2.latitude, df2.longitude))
cluster = plugins.MarkerCluster(locations=locations,popups=df2["neighbourhood"].tolist())
m.add_child(cluster)
m

df2

fig=px.scatter_mapbox(data_frame=df2,
                      lat="latitude",
                      lon="longitude",
                      color="neighbourhood",
                    hover_data=["name"],
                     hover_name="neighbourhood",
                     height=600,
                      width=700,zoom=9.5
                     );

fig.update_layout(mapbox_style="open-street-map")
fig.update_layout(margin={"r":0,"t":1,"l":0,"b":0})
fig.show()

fig=px.scatter_mapbox(data_frame=df2,
                      lat="latitude",
                      lon="longitude",
                      color="price",
                    hover_data=["name"],
                     hover_name="neighbourhood",
                     height=400,
                      width=600,
                     size="price", zoom=10);


fig.update_layout(mapbox_style="open-street-map")
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})  #margins of the map
fig.show()

df2['price'].max()

df=filtered_tokyo_listings_df

df['price'].astype(int)

import matplotlib as lb

plt.figure(figsize=(20,10))

fig5=sns.boxplot(data=df2, x='neighbourhood',y='price')
fig5.get_yaxis().set_major_formatter(lb.ticker.FuncFormatter(lambda x, p: format(int(x), ',')))
plt.ylim(0,100000)

df2['price'].groupby(df2['neighbourhood']).describe()

